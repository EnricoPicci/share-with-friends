import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import {Observable, Subject, ReplaySubject} from 'rxjs/Rx';

import {UserService} from './user.service';
import {SessionService} from './session.service';

@Injectable()
export class AuthGuard implements CanActivate {

    constructor(private router: Router,
                private userService: UserService,
                private session: SessionService) {}

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        return this.userService.currentUser$
                    .map(user => {
                        console.log('Route in the GGGUUUAAAAARRRDDD', route);
                        if (!user) {
                            const whereQueryParametersStarts = state.url.indexOf('?');
                            if (whereQueryParametersStarts === -1) {
                                this.session.path = state.url;
                            } else {
                                this.session.path = state.url.slice(0, whereQueryParametersStarts);
                            }
                            console.log('path in the GGGUUUAAAAARRRDDD', this.session.path);
                            this.session.sharableThingKey = route.queryParams['sharableThingkey'];
                            this.session.userMail = route.queryParams['user'];
                        }
                        // if the user is null or undefined, FALSE is returned, otherwise TRUE
                        return !!user;
                    })
                    .switchMap(logged => {
                        // the url parameters may have the user email to be used to login or signup
                        // this is the case for the urls generated by the mail service when preparing the mail for friends invited
                        // to share a thing
                        // in this case we want to retrieve the user data from the DB and see if he has already signed up or not
                        // so that we can present either the login page or the signup page
                        console.log('Logged in the GGGUUUAAAAARRRDDD', logged);
                        let ret: Observable<boolean>;
                        if (!logged) {
                            // if the user is not logged in and there is no email in the url parameters, then we go to the default route
                            if (!this.session.userMail) {
                                this.router.navigate(['']);
                                ret = this.getBooleanObservable(logged);
                            } else {
                                ret = this.userService.getUser(this.session.userMail)
                                                        .map(user => {
                                                            let path = '/auth/signup';
                                                            if (user.hasUserAlreadySignedUp()) {
                                                                path = '/auth/login';
                                                            }
                                                            console.log('PATH again in the GGGUUUAAAAARRRDDD', path);
                                                            this.router.navigate([path]);
                                                        })
                                                        .map(val => logged);
                            }
                        } else {
                            ret = this.getBooleanObservable(logged);
                        }
                        return ret;
                    });
    }
    getBooleanObservable(trueOrFalse: boolean) {
        const subject = new ReplaySubject<boolean>(1);
        subject.next(trueOrFalse);
        subject.complete();
        return subject.asObservable();
    }

}

